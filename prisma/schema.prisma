generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model UserRole {
  id   Int    @id @default(autoincrement())
  name String @unique

  users User[]
  permissions RolePermission[] @relation("RolePermissions")
}

model User {
  id            Int      @id @default(autoincrement())
  name          String
  address       String?
  dateOfBirth   DateTime
  email         String  @unique
  password      String
  phone   String?
  roleId        Int
  role          UserRole @relation(fields: [roleId], references: [id])

  managedTeams  Team[] @relation("Manager")
  activityLogs  UserActivityLog[]
  fields        Field[]
  refereedMatches Match[] @relation("Referee")
}

model UserActivityLog {
  id        Int      @id @default(autoincrement())
  userId    Int
  action    String
  timestamp DateTime

  user User @relation(fields: [userId], references: [id])
}

model RolePermission {
  id        Int    @id @default(autoincrement())
  name      String @unique
  roles     UserRole[] @relation("RolePermissions")
}

model Team {
  id         Int    @id @default(autoincrement())
  name       String
  managerId  Int    @unique
  location   String
  ageGroup   String
  contactInfo String?

  manager User @relation(fields: [managerId], references: [id], name: "Manager")
  players Player[]
  rosters TeamRoster[]
  bookings FieldBooking[]
  homeMatches Match[] @relation("HomeTeam")
  awayMatches Match[] @relation("AwayTeam")
}

model Player {
  id        Int    @id @default(autoincrement())
  name      String
  dateOfBirth DateTime
  teamId    Int
  position  String

  team  Team @relation(fields: [teamId], references: [id])
  rosters TeamRoster[]
  incidents IncidentsReporting[]
  matchStats MatchRelatedStats[]
}

model TeamRoster {
  id               Int    @id @default(autoincrement())
  teamId          Int
  playerId        Int
  currentForm     String
  injured         Boolean @default(false)
  availabilityStatus String

  team   Team   @relation(fields: [teamId], references: [id])
  player Player @relation(fields: [playerId], references: [id])
}

model Field {
  id               Int    @id @default(autoincrement())
  location         String
  capacity        Int
  amenities       String?
  availabilityStatus String
  userId          Int

  user User @relation(fields: [userId], references: [id])
  bookings FieldBooking[]
  maintenance FieldMaintenanceSchedule[]
  revenueAnalytics RevenueAnalytics[]
  matches Match[]
}

model FieldMaintenanceSchedule {
  id            Int    @id @default(autoincrement())
  fieldId       Int
  scheduleType  String
  scheduleDetails String
  updates       String?
  issues        String?

  field Field @relation(fields: [fieldId], references: [id])
}

model FieldBooking {
  id             Int    @id @default(autoincrement())
  teamId        Int
  matchId       Int
  fieldId       Int
  timing        DateTime
  acceptReject  String?
  status        String

  team  Team  @relation(fields: [teamId], references: [id])
  match Match @relation(fields: [matchId], references: [id])
  field Field @relation(fields: [fieldId], references: [id])
}

model Match {
  id           Int    @id @default(autoincrement())
  homeTeamId  Int
  awayTeamId  Int
  date        DateTime
  fieldId     Int
  refereeId   Int

  homeTeam Team @relation(fields: [homeTeamId], references: [id], name: "HomeTeam")
  awayTeam Team @relation(fields: [awayTeamId], references: [id], name: "AwayTeam")
  field    Field @relation(fields: [fieldId], references: [id])
  referee  User  @relation(fields: [refereeId], references: [id], name: "Referee")
  
  result   MatchResult?
  incidents IncidentsReporting[]
  bookings FieldBooking[]
  matchStats MatchRelatedStats[]
}

model MatchResult {
  id                   Int    @id @default(autoincrement())
  matchId             Int @unique
  homeTeamScore      Int
  awayTeamScore      Int
  status             String
  timeStamp         DateTime
  assists           Int?
  yellowCard        Int?
  redCard           Int?
  penalties         Int?
  shotsOnTarget     Int?

  match Match @relation(fields: [matchId], references: [id])
}

model IncidentsReporting {
  id       Int    @id @default(autoincrement())
  matchId  Int
  playerId Int
  type     String
  suspension String?

  match  Match  @relation(fields: [matchId], references: [id])
  player Player @relation(fields: [playerId], references: [id])
}

model RevenueAnalytics {
  id       Int    @id @default(autoincrement())
  fieldId  Int
  fieldUsage String
  amount   Float

  field Field @relation(fields: [fieldId], references: [id])
}

model MatchRelatedStats {
  id            Int    @id @default(autoincrement())
  matchId      Int
  playerId     Int
  goals        Int?
  assists      Int?
  yellowCard   Int?
  redCard      Int?
  fouls        Int?
  shotsOnTarget Int?

  match  Match  @relation(fields: [matchId], references: [id])
  player Player @relation(fields: [playerId], references: [id])
}
